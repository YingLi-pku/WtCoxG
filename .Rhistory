re = M_G1(t, MAF)/M_G0(t, MAF)
return(re)
}
# The second derivative of the CGF of G (genotype)
K_G2 = function(t, MAF){
re = M_G0(t, MAF)/M_G0(t, MAF) * M_G2(t, MAF)/M_G0(t, MAF) -(M_G1(t, MAF)/M_G0(t, MAF))^2
return(re)
}
# The CGF of score test statistic
H_org = function(t, R, MAF, n.ext, N.all, sumR, var_mu_ext, g.var.est, meanR, b){
n.t = length(t)
out = rep(0,n.t)
R_hat  = sumR/N.all
mu.adj = -2 * b * sumR * MAF
var.adj = 4 * b^2 * sumR^2 * var_mu_ext
for(i in 1:n.t){
t1 = t[i]
out[i] = sum(K_G0(t1 * (R - (1 - b) * meanR), MAF)) + mu.adj * t1 + var.adj/2 * t1^2
}
return(out)
}
# The first derivative of the CGF of score test statistic
H1_adj = function(t, R, s, MAF, n.ext, N.all, sumR,var_mu_ext, g.var.est,meanR,b)
{
n.t = length(t)
out = rep(0,n.t)
R_hat  = sumR/N.all
mu.adj = -2*b*sumR*MAF
var.adj = 4*b^2 *sumR^2* var_mu_ext
for(i in 1:n.t){
t1 = t[i]
out[i] = sum(( R - (1 - b) * meanR) *K_G1(t1 * ((R - (1 - b) * meanR)), MAF)) + mu.adj + var.adj * t1 - s
}
return(out)
}
# The second derivative of the CGF of score test statistic
H2 = function(t, R, MAF, n.ext, N.all, sumR, var_mu_ext, g.var.est, meanR, b)
{
n.t = length(t)
out = rep(0,n.t)
R_hat  = sumR/N.all
mu.adj = -n.ext*R_hat*2*MAF
var.adj = n.ext*R_hat^2*2*MAF*(1-MAF)
for(i in 1:n.t){
t1 = t[i]
out[i] = sum((R - (1 - b) * meanR)^2 * K_G2(t1 * (R - (1 - b) * meanR) , MAF)) + var.adj
}
return(out)
}
GetProb_SPA_G = function(MAF, R, s, n.ext, N.all, sumR,var_mu_ext, g.var.est,meanR,b, lower.tail){
out = uniroot(H1_adj, c(-1,1), extendInt = "yes",
R=R, s=s, MAF=MAF, n.ext=n.ext, N.all = N.all, sumR = sumR,
var_mu_ext = var_mu_ext, g.var.est=g.var.est, meanR =meanR, b=b)
zeta = out$root
k1 = H_org(zeta, R=R, MAF=MAF, n.ext=n.ext, N.all = N.all, sumR = sumR,
var_mu_ext = var_mu_ext, g.var.est=g.var.est, meanR =meanR,b=b)
k2 = H2(zeta, R=R, MAF=MAF, n.ext=n.ext, N.all = N.all, sumR = sumR,
var_mu_ext = var_mu_ext, g.var.est=g.var.est, meanR =meanR, b=b)
temp1 = zeta * s - k1
w = sign(zeta) * (2 *temp1)^{1/2}
v = zeta * (k2)^{1/2}
pval = pnorm(w + 1/w * log(v/w), lower.tail = lower.tail)
# pval.norm = pnorm(q2, lower.tail = lower.tail)
re = pval
return(re)
}
#saddlepoint approximation (SPA) to calicrate the p value in the case that batcheffect = 0 or 1
SPA_G.one.SNP_homo = function(g,                ### genotype vector
R,                ### null model residual vector
mu.ext = NA,      ### external MAF
n.ext = NA,       ### external sample size
b = 0,            ### weight of external MAF
sigma2 = NA,      ###
var.ratio = 1,
Cutoff = 2,
impute.method = "fixed",
missing.cutoff = 0.15,
min.mac = 10,          # update on 2022-08-16 : replace 0.0001 by 0.000001
G.model = "Add")
{
## calculate MAF and update genotype vector
##imputation missing SNP
missing.rate = mean(is.na(g))
pos.na = which(is.na(g))
if(missing.rate != 0){
g[pos.na] = mean(na.omit(g))
}
if(is.na(mu.ext)){
mu.ext =0
n.ext=0
}
if(sum(g)<min.mac|sum(2-g)<min.mac|missing.rate>missing.cutoff){
MAF= mean(na.omit(g))/2
return(c(NA, NA))
}
######################################################################
## Score statistic
N=length(g)
mu.int = mean(g)/2
MAF = (1-b) * mu.int + b * mu.ext
sumR = sum(R)
N.all = N + n.ext
S = sum(R *(g-2*MAF))
S = S / var.ratio
## estimated variance without adjusting for covariates
g.var.est = 2 * MAF * (1 - MAF)
var_mu_ext = ifelse(n.ext==0,0, MAF*(1-MAF)/(2*n.ext)+sigma2)
#  S.var = sum(R^2 * g.var.est + sum(R)^2 * g.var.est/n.ext)
meanR  = mean(R)
S.var = sum((R-(1-b)*meanR)^2)*g.var.est +  4*b^2 *sumR^2* var_mu_ext
z = S/sqrt(S.var)
if(abs(z) < Cutoff){
pval.norm = pnorm(abs(z), lower.tail = FALSE)*2
return(c(pval.norm, pval.norm))  # update on 2022-10-05 : MAF.est.negative.num
}else{
pval1 = GetProb_SPA_G(MAF, R = R, abs(S), n.ext=n.ext, N.all=N.all,
var_mu_ext = var_mu_ext, g.var.est=g.var.est,meanR =meanR,
sumR=sumR, b=b, lower.tail = FALSE) # EmpSPA-G p value
pval2 = GetProb_SPA_G(MAF, R = R, -abs(S), n.ext=n.ext, N.all=N.all,
var_mu_ext = var_mu_ext, g.var.est=g.var.est,meanR =meanR,
sumR=sumR, b=b, lower.tail = TRUE) # EmpSPA-G p value
pval3 = pnorm(abs(z), lower.tail = FALSE) # Normal
pval4 = pnorm(-abs(z), lower.tail = TRUE) # Normal
pval.spa.G = pval1 + pval2
pval.norm = pval3 + pval4
# if(abs(z) < Cutoff){
#   pval.spa.G = pval.norm
# }
return(c(pval.spa.G, pval.norm))
}
}
WtCoxG = function(GenoFile
, GenoFileIndex = NULL           # additional index file(s) corresponding to GenoFile
, Geno.mtx = NULL                # also support genotype matrix
, obj.WtCoxG = NULL              # output list of QCforBatchEffect
, PhenoFile = NULL
, mergeGenoInfoFile = NULL
, RefPrevalence = NULL
, control = NULL
, OutputFile               # output file path
, cutoff=0.1){
if(!is.null(obj.WtCoxG)){
PhenoData = obj.WtCoxG$PhenoData
mergeGenoInfo = obj.WtCoxG$mergeGenoInfo
RefPrevalence = obj.WtCoxG$RefPrevalence
}else{
PhenoData = fread(PhenoFile)
mergeGenoInfo = fread(mergeGenoInfoFile)
RefPrevalence = RefPrevalence
}
if(is.null(Geno.mtx)){
G = GRAB.ReadGeno(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = PhenoData$SampleID
,control = control)$GenoMat
}else{G = Geno.mtx}
## GWAS analysis ----------------------------------------------------------------------
cat("Start GWAS analysis ########################################################## \n")
t1=Sys.time()
GWAS = lapply(1:ncol(G),function(i){
if(i%%1000==0)cat("Complete ",i,"/",ncol(G),"\n")
g = G[,i]
R = PhenoData$R
w = PhenoData$weight
mu.ext = mergeGenoInfo$AF_ref[i]
n.ext = mergeGenoInfo$AN_ref[i]/2
TPR = mergeGenoInfo$TPR[i]
sigma2 = mergeGenoInfo$sigma2[i]
p_bat = mergeGenoInfo$pvalue_bat[i]
w.ext = mergeGenoInfo$w.ext[i]
var.ratio.w0 = mergeGenoInfo$var.ratio.w0[i]
var.ratio.int = mergeGenoInfo$var.ratio.int[i]
var.ratio0 = mergeGenoInfo$var.ratio.ext[i]
WtCoxG.ext = WtCoxG.test(g = g,
R = R,
w = w,
TPR=TPR,
sigma2 = sigma2,
b = w.ext,
var.ratio.w0 =var.ratio.w0,
var.ratio.w1 = var.ratio.w0,
var.ratio0 = var.ratio0,
var.ratio1 = var.ratio0,
mu.ext = mu.ext,
n.ext = n.ext,
p_bat = p_bat,
p_cut = cutoff)
WtCoxG.noext = WtCoxG.test(g = g,
R = R,
w = w,
var.ratio.int = var.ratio.int,
p_bat = p_bat,
p_cut = cutoff)
return( cbind(WtCoxG.ext, WtCoxG.noext) )
}) %>%
do.call("rbind",.) %>%
cbind(.,mergeGenoInfo)
t2=Sys.time()
print(t2-t1)
fwrite(GWAS, file = OutputFile)
return(GWAS)
}
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
obj.WtCoxG = obj.WtCoxG,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
WtCoxG = function(GenoFile
, GenoFileIndex = NULL           # additional index file(s) corresponding to GenoFile
, Geno.mtx = NULL                # also support genotype matrix
, obj.WtCoxG = NULL              # output list of QCforBatchEffect
, PhenoFile = NULL
, mergeGenoInfoFile = NULL
, RefPrevalence = NULL
, control = NULL
, OutputFile               # output file path
, cutoff=0.1){
library(data.table)
if(!is.null(obj.WtCoxG)){
PhenoData = obj.WtCoxG$PhenoData
mergeGenoInfo = obj.WtCoxG$mergeGenoInfo
RefPrevalence = obj.WtCoxG$RefPrevalence
}else{
PhenoData = fread(PhenoFile)
mergeGenoInfo = fread(mergeGenoInfoFile)
RefPrevalence = RefPrevalence
}
if(is.null(Geno.mtx)){
G = GRAB.ReadGeno(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = PhenoData$SampleID
,control = control)$GenoMat
}else{G = Geno.mtx}
## GWAS analysis ----------------------------------------------------------------------
cat("Start GWAS analysis ########################################################## \n")
t1=Sys.time()
GWAS = lapply(1:ncol(G),function(i){
if(i%%1000==0)cat("Complete ",i,"/",ncol(G),"\n")
g = G[,i]
R = PhenoData$R
w = PhenoData$weight
mu.ext = mergeGenoInfo$AF_ref[i]
n.ext = mergeGenoInfo$AN_ref[i]/2
TPR = mergeGenoInfo$TPR[i]
sigma2 = mergeGenoInfo$sigma2[i]
p_bat = mergeGenoInfo$pvalue_bat[i]
w.ext = mergeGenoInfo$w.ext[i]
var.ratio.w0 = mergeGenoInfo$var.ratio.w0[i]
var.ratio.int = mergeGenoInfo$var.ratio.int[i]
var.ratio0 = mergeGenoInfo$var.ratio.ext[i]
WtCoxG.ext = WtCoxG.test(g = g,
R = R,
w = w,
TPR=TPR,
sigma2 = sigma2,
b = w.ext,
var.ratio.w0 =var.ratio.w0,
var.ratio.w1 = var.ratio.w0,
var.ratio0 = var.ratio0,
var.ratio1 = var.ratio0,
mu.ext = mu.ext,
n.ext = n.ext,
p_bat = p_bat,
p_cut = cutoff)
WtCoxG.noext = WtCoxG.test(g = g,
R = R,
w = w,
var.ratio.int = var.ratio.int,
p_bat = p_bat,
p_cut = cutoff)
return( cbind(WtCoxG.ext, WtCoxG.noext) )
}) %>%
do.call("rbind",.) %>%
cbind(.,mergeGenoInfo)
t2=Sys.time()
print(t2-t1)
fwrite(GWAS, file = OutputFile)
return(GWAS)
}
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_WtSPAG.txt",
mergeGenoInfoFile = "qcBGEN1.txt"
RefPrevalence = 0.1
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_WtSPAG.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1
OutputFile = "simuBGEN1.txt",
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_WtSPAG.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
data = fread("qcBGEN1.txt")
head(data )
tail(data )
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
obj.WtCoxG = obj.WtCoxG,
# PhenoFile = "simuPHENO_WtSPAG.txt",
# mergeGenoInfoFile = "qcBGEN1.txt",
# RefPrevalence = 0.1,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_WtSPAG.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
PhenoFile = "simuPHENO_WtSPAG.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1,
PhenoData = fread(PhenoFile)
PhenoFile = "simuPHENO_WtSPAG.txt"
mergeGenoInfoFile = "qcBGEN1.txt"
RefPrevalence = 0.1
PhenoData = fread(PhenoFile)
mergeGenoInfo = fread(mergeGenoInfoFile)
RefPrevalence = RefPrevalence
G = GRAB.ReadGeno(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = PhenoData$SampleID
,control = control)$GenoMat
control = list(AlleleOrder = "ref-first", AllMarkers=T)
G = GRAB.ReadGeno(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = PhenoData$SampleID
,control = control)$GenoMat
GenoFile = "simuBGEN1.bgen"
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample")
G = GRAB.ReadGeno(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = PhenoData$SampleID
,control = control)$GenoMat
i=1
g = G[,i]
R = PhenoData$R
w = PhenoData$weight
mu.ext = mergeGenoInfo$AF_ref[i]
n.ext = mergeGenoInfo$AN_ref[i]/2
TPR = mergeGenoInfo$TPR[i]
sigma2 = mergeGenoInfo$sigma2[i]
p_bat = mergeGenoInfo$pvalue_bat[i]
w.ext = mergeGenoInfo$w.ext[i]
var.ratio.w0 = mergeGenoInfo$var.ratio.w0[i]
var.ratio.int = mergeGenoInfo$var.ratio.int[i]
var.ratio0 = mergeGenoInfo$var.ratio.ext[i]
mu.ext
n.ext
g = G[,i]
R = PhenoData$R
w = PhenoData$weight
mu.ext = mergeGenoInfo$AF_ref[i]
n.ext = mergeGenoInfo$AN_ref[i]/2
TPR = mergeGenoInfo$TPR[i]
sigma2 = mergeGenoInfo$sigma2[i]
p_bat = mergeGenoInfo$pvalue_bat[i]
w.ext = mergeGenoInfo$w.ext[i]
var.ratio.w0 = mergeGenoInfo$var.ratio.w0[i]
var.ratio.int = mergeGenoInfo$var.ratio.int[i]
var.ratio0 = mergeGenoInfo$var.ratio.ext[i]
WtCoxG.ext = WtCoxG.test(g = g,
R = R,
w = w,
TPR=TPR,
sigma2 = sigma2,
b = w.ext,
var.ratio.w0 =var.ratio.w0,
var.ratio.w1 = var.ratio.w0,
var.ratio0 = var.ratio0,
var.ratio1 = var.ratio0,
mu.ext = mu.ext,
n.ext = n.ext,
p_bat = p_bat,
p_cut = cutoff)
cutoff
cutoff=0.1
g = G[,i]
R = PhenoData$R
w = PhenoData$weight
mu.ext = mergeGenoInfo$AF_ref[i]
n.ext = mergeGenoInfo$AN_ref[i]/2
TPR = mergeGenoInfo$TPR[i]
sigma2 = mergeGenoInfo$sigma2[i]
p_bat = mergeGenoInfo$pvalue_bat[i]
w.ext = mergeGenoInfo$w.ext[i]
var.ratio.w0 = mergeGenoInfo$var.ratio.w0[i]
var.ratio.int = mergeGenoInfo$var.ratio.int[i]
var.ratio0 = mergeGenoInfo$var.ratio.ext[i]
WtCoxG.ext = WtCoxG.test(g = g,
R = R,
w = w,
TPR=TPR,
sigma2 = sigma2,
b = w.ext,
var.ratio.w0 =var.ratio.w0,
var.ratio.w1 = var.ratio.w0,
var.ratio0 = var.ratio0,
var.ratio1 = var.ratio0,
mu.ext = mu.ext,
n.ext = n.ext,
p_bat = p_bat,
p_cut = cutoff)
head(R)
head(PhenoData )
fwrite(PhenoData, file = "simuPHENO_Resid.txt" ,col.names = T, sep = "\t")
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_Resid.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
PhenoFile = "simuPHENO_Resid.txt"
head(PhenoData)
null.WtSPAG = GRAB.NullModel(formula,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
null.WtSPAG = GRAB.NullModel(formula,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
PhenoData = read.table("simuPHENO_WtSPAG.txt", header = T)
head(PhenoData)
PhenoData = PhenoData%>%rename(SampleID = IID, Indicator = SurvEvent )
head(PhenoData)
null.WtSPAG = GRAB.NullModel(formula,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
formula
Surv(SurvTime , Indicator) ~ Cov1 + Cov2
formula = Surv(SurvTime , Indicator) ~ Cov1 + Cov2
null.WtSPAG = GRAB.NullModel(formula,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
PhenoData = PhenoData %>%
mutate(R = null.WtSPAG$mresid,
weight = null.WtSPAG$weight)
head(PhenoData)
fwrite(PhenoData, file = "simuPHENO_Resid.txt" ,col.names = T, sep = "\t")
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_Resid.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
gc()
remove.packages("WtCoxG")
library(WtCoxG)
?WtCoxG
roxygen2::roxygenise()
?WtCoxG
?QCforBatchEffect
?WtCoxG
setwd(system.file("", package = "WtCoxG"))
RefPrevalence = 0.1
#step0&1: fit a null model and estimate parameters according to batch effect p values
obj.WtCoxG = QCforBatchEffect(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi",
"simuBGEN1.sample"),
OutputFile = "qcBGEN1.txt",
control=list(AlleleOrder = "ref-first",
AllMarkers = T,
IndicatorColumn = "SurvEvent", SampleIDColumn = "IID"),
PhenoFile = "simuPHENO_WtSPAG.txt",
RefAfFile = "RefMAFs.txt",
RefPrevalence = RefPrevalence,
formula = Surv(SurvTime , Indicator) ~ Cov1 + Cov2,
SNPnum=1e4)
names(obj.WtCoxG)
#step2: conduct association testing
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
obj.WtCoxG = obj.WtCoxG,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
# Or users can input PhenoFile, mergeGenoInfoFile and RefPrevalence seperately
GWAS = WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
#obj.WtCoxG = obj.WtCoxG,
PhenoFile = "simuPHENO_Resid.txt",
mergeGenoInfoFile = "qcBGEN1.txt",
RefPrevalence = 0.1,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
remove.packages(WtCoxG)
PhenoData <- read.table("simuPHENO_WtSPAG.txt", header = TRUE)
head(PhenoData)
